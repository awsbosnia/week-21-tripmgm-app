{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-webstorage\";\nimport * as i3 from \"../config/application-config.service\";\nexport let AuthServerProvider = /*#__PURE__*/(() => {\n  class AuthServerProvider {\n    constructor(http, localStorageService, sessionStorageService, applicationConfigService) {\n      this.http = http;\n      this.localStorageService = localStorageService;\n      this.sessionStorageService = sessionStorageService;\n      this.applicationConfigService = applicationConfigService;\n    }\n\n    getToken() {\n      var _a;\n\n      const tokenInLocalStorage = this.localStorageService.retrieve('authenticationToken');\n      const tokenInSessionStorage = this.sessionStorageService.retrieve('authenticationToken');\n      return (_a = tokenInLocalStorage !== null && tokenInLocalStorage !== void 0 ? tokenInLocalStorage : tokenInSessionStorage) !== null && _a !== void 0 ? _a : '';\n    }\n\n    login(credentials) {\n      return this.http.post(this.applicationConfigService.getEndpointFor('api/authenticate'), credentials).pipe(map(response => this.authenticateSuccess(response, credentials.rememberMe)));\n    }\n\n    logout() {\n      return new Observable(observer => {\n        this.localStorageService.clear('authenticationToken');\n        this.sessionStorageService.clear('authenticationToken');\n        observer.complete();\n      });\n    }\n\n    authenticateSuccess(response, rememberMe) {\n      const jwt = response.id_token;\n\n      if (rememberMe) {\n        this.localStorageService.store('authenticationToken', jwt);\n        this.sessionStorageService.clear('authenticationToken');\n      } else {\n        this.sessionStorageService.store('authenticationToken', jwt);\n        this.localStorageService.clear('authenticationToken');\n      }\n    }\n\n  }\n\n  AuthServerProvider.ɵfac = function AuthServerProvider_Factory(t) {\n    return new (t || AuthServerProvider)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.ApplicationConfigService));\n  };\n\n  AuthServerProvider.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServerProvider,\n    factory: AuthServerProvider.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthServerProvider;\n})();","map":null,"metadata":{},"sourceType":"module"}