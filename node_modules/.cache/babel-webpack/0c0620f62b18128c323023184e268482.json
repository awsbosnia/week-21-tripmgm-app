{"ast":null,"code":"import { ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"ngx-webstorage\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"app/core/auth/state-storage.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../config/application-config.service\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(translateService, sessionStorageService, http, stateStorageService, router, applicationConfigService) {\n      this.translateService = translateService;\n      this.sessionStorageService = sessionStorageService;\n      this.http = http;\n      this.stateStorageService = stateStorageService;\n      this.router = router;\n      this.applicationConfigService = applicationConfigService;\n      this.userIdentity = null;\n      this.authenticationState = new ReplaySubject(1);\n    }\n\n    save(account) {\n      return this.http.post(this.applicationConfigService.getEndpointFor('api/account'), account);\n    }\n\n    authenticate(identity) {\n      this.userIdentity = identity;\n      this.authenticationState.next(this.userIdentity);\n    }\n\n    hasAnyAuthority(authorities) {\n      if (!this.userIdentity) {\n        return false;\n      }\n\n      if (!Array.isArray(authorities)) {\n        authorities = [authorities];\n      }\n\n      return this.userIdentity.authorities.some(authority => authorities.includes(authority));\n    }\n\n    identity(force) {\n      if (!this.accountCache$ || force || !this.isAuthenticated()) {\n        this.accountCache$ = this.fetch().pipe(catchError(() => of(null)), tap(account => {\n          this.authenticate(account); // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          // unless user have choosed other language in the current session\n\n          if (!this.sessionStorageService.retrieve('locale') && account) {\n            this.translateService.use(account.langKey);\n          }\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }), shareReplay());\n      }\n\n      return this.accountCache$;\n    }\n\n    isAuthenticated() {\n      return this.userIdentity !== null;\n    }\n\n    getAuthenticationState() {\n      return this.authenticationState.asObservable();\n    }\n\n    fetch() {\n      return this.http.get(this.applicationConfigService.getEndpointFor('api/account'));\n    }\n\n    navigateToStoredUrl() {\n      // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n      // if login is successful, go to stored previousState and clear previousState\n      const previousUrl = this.stateStorageService.getUrl();\n\n      if (previousUrl) {\n        this.stateStorageService.clearUrl();\n        this.router.navigateByUrl(previousUrl);\n      }\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.StateStorageService), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.ApplicationConfigService));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}